package yychatserver;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import com.yychat.model.Message;
import com.yychat.model.User;

public class StartServer {
	public static HashMap hmSocket=new HashMap<String,Socket>();
	
	ServerSocket ss;
	String userName;
	String passWord;
	String userMessageType;
	Message mess;
	public StartServer() {
		
		try {
			ss=new ServerSocket(3456);
			System.out.println("服务器已经启动，监听3456端口");
			while(true){
			
			Socket s=ss.accept();
			System.out.println("连接成功:"+s);
		
		ObjectInputStream ois=new ObjectInputStream(s.getInputStream());
		User user=(User)ois.readObject();
		userName=user.getUserName();
		passWord=user.getPassWord();
		userMessageType=user.getUserMessageType();
		mess=new Message();
		mess.setSender("Server");
		mess.setReceiver(userName);
		System.out.println(user.getUserName());
		System.out.println(user.getPassWord());
		Connection connection=yychatDbUtil.getConnection();
		
		System.out.println(userMessageType);
		
		if(user.getUserMessageType().equals("USER_REGISTER")){
			boolean seeKUserResult=yychatDbUtil.seeKUser(userName);
			
			if(seeKUserResult){
				//返回客户端注册失败
				mess.setMessageType(Message.message_RegisterFailure);
			}else{
				//将新用户名插入user表，返回客户端注册成功
				yychatDbUtil.addUser(userName,passWord);
				mess.setMessageType(Message.message_RegisterSuccess);
			}
			sendMessage(s, mess);
			s.close();
		}
		
		if(user.getUserMessageType().equals("USER_LOGIN")){
			boolean loginSuccess=yychatDbUtil.loginValidate(userName, passWord);
			if(loginSuccess){
				//告诉客户端密码验证通过,可以创建Message类
				
			mess.setMessageType(Message.message_LoginSuccess);//1为验证通过
			

			String friendString=yychatDbUtil.getFriendString(userName);
			
			mess.setContent(friendString);
			
			}else{	
				
				mess.setMessageType(Message.message_LoginFailure);//0为验证不通过
				
			}
			sendMessage(s,mess);
			if(loginSuccess){
				//     第一步 
				 mess.setMessageType(Message.message_NewOnlineFriend);
				 mess.setSender("Server");
				 mess.setContent(userName);
				 
				 Set onlineFriendSet=hmSocket.keySet();
				 Iterator it=onlineFriendSet.iterator();
				 String friendName;
				 while(it.hasNext()){
					 friendName=(String)it.next();
					 mess.setReceiver(friendName);
					 
					//Socket s1=(Socket)hmSocket.get(friendName);
					 sendMessage(s,mess);
				 }
				 
				
				
				hmSocket.put(userName,s);
				//new ServerReceiverThread(s).start();
				
				}
		
				}
		}

		
		//密码验证功能
//		mess=new Message();
//		mess.setSender("Seerver");
//		mess.setReceiver(userName);
//		
//		boolean loginSuccess=ZzchatDbUtil.loginValidate(userName, passWord);
//		if(loginSuccess){
//			//告诉客户端密码验证通过,可以创建Message类
//			
//		mess.setMessageType("Message.message_LoginSuccess");//1为验证通过
//		
//
//		String friendString=ZzchatDbUtil.getFriendString(userName);
//		mess.setContent(friendString);
//		
//		}else{	
//			
//			mess.setMessageType("Message.message_LoginFailure");//0为验证不通过
//			
//		}
//		sendMessage(s,mess);
//		if(loginSuccess){
//			//     第一步 
//			 mess.setMessageType(Message.message_NewOnlineFriend);
//			 mess.setSender("Server");
//			 mess.setContent(userName);
//			 
//			 
//			 Set onlineFriendSet=hmSocket.keySet();
//			 Iterator it=onlineFriendSet.iterator();
//			 String friendName;
//			 while(it.hasNext()){
//				 friendName=(String)it.next();
//				 mess.setReceiver(friendName);
//				 
//				 Socket s1=(Socket)hmSocket.get(friendName);
//				 sendMessage(s1,mess);
//			 }
//			 
//			
//			
//			hmSocket.put(userName,s);
//			new ServerReceiverThread(s).start();
//			
//			}
//	
//			}
		
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	private void sendMessage(Socket s,Message mess) throws IOException {
		ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
		oos.writeObject(mess);
	}

	
}


